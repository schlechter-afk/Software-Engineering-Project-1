@startuml BookAddDisplay

skinparam rectangle {
    BackgroundColor LightYellow
    BorderColor Black
}

abstract class BaseResource {
  - request: HttpServletRequest
  - appKey: String
  # principal: IPrincipal
  + authenticate(): boolean
  + checkBaseFunction(baseFunction: BaseFunction): void
  + hasBaseFunction(baseFunction: BaseFunction): boolean
}

class BookResource {
    - principal: Principal
    + add(isbn: String): Response
    + delete(userBookId: String): Response
    + add(title: String, subtitle: String, author: String, description: String, isbn10: String, isbn13: String, pageCount: Long, language: String, publishDateStr: String, tagList: List<String>): Response
    + update(userBookId: String, title: String, subtitle: String, author: String, description: String, isbn10: String, isbn13: String, pageCount: Long, language: String, publishDateStr: String, tagList: List<String>): Response
    + get(userBookId: String): Response
    + cover(userBookId: String): Response
    + updateCover(userBookId: String, imageUrl: String): Response
    + list(limit: Integer, offset: Integer, sortColumn: Integer, asc: Boolean, search: String, read: Boolean, tagName: String): Response
    + importFile(fileBodyPart: FormDataBodyPart): Response
    + read(userBookId: String, read: boolean): Response
}

class User {
  - id: String
  - localeId: String
  - roleId: String
  - username: String
  - password: String
  - email: String
  - theme: String
  - firstConnection: boolean
  - createDate: Date
  - deleteDate: Date
  + getId(): String
  + getLocaleId(): String
  + getRoleId(): String
  + getUsername(): String
  + getPassword(): String
  + getEmail(): String
  + getTheme(): String
  + isFirstConnection(): boolean
  + getCreateDate(): Date
  + getDeleteDate(): Date
  + setId(id: String): void
  + setLocaleId(localeId: String): void
  + setRoleId(roleId: String): void
  + setUsername(username: String): void
  + setPassword(password: String): void
  + setEmail(email: String): void
  + setTheme(theme: String): void
  + setFirstConnection(firstConnection: boolean): void
  + setCreateDate(createDate: Date): void
  + setDeleteDate(deleteDate: Date): void
  + toString(): String
}

class Book {
  - id: String
  - title: String
  - subtitle: String
  - author: String
  - description: String
  - isbn10: String
  - isbn13: String
  - pageCount: Long
  - language: String
  - publishDate: Date
  + getId(): String
  + getTitle(): String
  + getSubtitle(): String
  + getAuthor(): String
  + getDescription(): String
  + getIsbn10(): String
  + getIsbn13(): String
  + getPageCount(): Long
  + getLanguage(): String
  + getPublishDate(): Date
  + setId(id: String): void
  + setTitle(title: String): void
  + setSubtitle(subtitle: String): void
  + setAuthor(author: String): void
  + setDescription(description: String): void
  + setIsbn10(isbn10: String): void
  + setIsbn13(isbn13: String): void
  + setPageCount(pageCount: Long): void
  + setLanguage(language: String): void
  + setPublishDate(publishDate: Date): void
  + toString(): String
}

class UserBook {
  - id: String
  - bookId: String
  - userId: String
  - createDate: Date
  - deleteDate: Date
  - readDate: Date

  + getId(): String
  + setId(id: String): void
  + getBookId(): String
  + setBookId(bookId: String): void
  + getUserId(): String
  + setUserId(userId: String): void
  + getCreateDate(): Date
  + setCreateDate(createDate: Date): void
  + getDeleteDate(): Date
  + setDeleteDate(deleteDate: Date): void
  + getReadDate(): Date
  + setReadDate(readDate: Date): void
}

class UserBookDao {
  +create(userBook: UserBook): String
  +delete(id: String): void
  +getUserBook(userBookId: String, userId: String): UserBook
  +getUserBook(userBookId: String): UserBook
  +getByBook(bookId: String, userId: String): UserBook
  +findByCriteria(paginatedList: PaginatedList<UserBookDto>, criteria: UserBookCriteria, sortCriteria: SortCriteria): void
}

class UserBookDto {
  - id: String
  - title: String
  - subtitle: String
  - author: String
  - language: String
  - publishTimestamp: Long
  - createTimestamp: Long
  - readTimestamp: Long
}

class BookDao {
  + create(book: Book): String
  + getById(id: String): Book
  + getByIsbn(isbn: String): Book
}

class UserBookCriteria {
  - userId: String
  - search: String
  - read: Boolean
  - tagIdList: List<String>

  + getUserId(): String
  + setUserId(userId: String): void
  + getSearch(): String
  + setSearch(search: String): void
  + getTagIdList(): List<String>
  + setTagIdList(tagIdList: List<String>): void
  + getRead(): Boolean
  + setRead(read: Boolean): void
}

class SortCriteria {
  - column: int
  - asc: boolean

  + SortCriteria(Integer, Boolean)
  + getColumn(): int
  + isAsc(): boolean
}

class PaginatedList<T> {
  - limit: int
  - offset: int
  - resultCount: int
  - resultList: List<T>

  + PaginatedList(int, int)
  + getResultCount(): int
  + setResultCount(int): void
  + getResultList(): List<T>
  + setResultList(List<T>): void
  + getLimit(): int
  + getOffset(): int
}

class PaginatedLists {
  {field} -DEFAULT_PAGE_SIZE: int
  {field} -MAX_PAGE_SIZE: int
  + create(pageSize: Integer, offset: Integer): PaginatedList<E>
  + create(): PaginatedList<E>
  + executeCountQuery(paginatedList: PaginatedList<E>, queryParam: QueryParam): void
  + executeResultQuery(paginatedList: PaginatedList<E>, queryParam: QueryParam): List<Object[]>
  + executePaginatedQuery(paginatedList: PaginatedList<E>, queryParam: QueryParam): List<Object[]>
  + executePaginatedQuery(paginatedList: PaginatedList<E>, queryParam: QueryParam, sortCriteria: SortCriteria): List<Object[]>
}

class BookDataService {
- log: Logger
- GOOGLE_BOOKS_SEARCH_FORMAT: String
- OPEN_LIBRARY_FORMAT: String
- executor: ExecutorService
- googleRateLimiter: RateLimiter
- openLibraryRateLimiter: RateLimiter
- apiKeyGoogle: String
- formatter: DateTimeFormatter
+ startUp(): void
+ initConfig(): void
+ searchBook(rawIsbn: String): Book
- searchBookWithGoogle(isbn: String): Book
- searchBookWithOpenLibrary(isbn: String): Book
+ downloadThumbnail(book: Book, imageUrl: String): void
+ shutDown(): void
}

class BookImportedEvent {
  - user: User
  - importFile: File
  + getUser(): User
  + setUser(user: User): void
  + getImportFile(): File
  + setImportFile(importFile: File): void
  + toString(): String
}

class AppContext {
  - instance: AppContext
  - eventBus: EventBus
  - asyncEventBus: EventBus
  - importEventBus: EventBus
  - bookDataService: BookDataService
  - facebookService: FacebookService
  - asyncExecutorList: List<ExecutorService>
  + getInstance(): AppContext
  - resetEventBus(): void
  - newAsyncEventBus(): EventBus
  + getEventBus(): EventBus
  + getAsyncEventBus(): EventBus
  + getImportEventBus(): EventBus
  + getBookDataService(): BookDataService
  + getFacebookService(): FacebookService
  - AppContext()
}

BookResource --|> BaseResource
TagResource --|> BaseResource

BookDao --> Book : <<uses>>

UserBookDao --> UserBook : <<uses>>
UserBookDao --> PaginatedList : <<uses>>
UserBookDao --> PaginatedLists : <<uses>>
UserBookDao --> SortCriteria : <<uses>>
UserBookDao --> UserBookCriteria : <<uses>>
UserBookDao --> UserBookDto : <<uses>>

BookResource --> AppContext : <<uses>>
BookResource --> Book : <<uses>>
BookResource --> BookDao : <<uses>>
BookResource --> UserBook : <<uses>>
BookResource --> UserBookDao : <<uses>>
BookResource --> UserBookCriteria : <<uses>>
BookResource --> SortCriteria : <<uses>>
BookResource --> PaginatedList : <<uses>>
BookResource --> UserBookDto : <<uses>>

BookResource --> BookImportedEvent : <<uses>>
BookDataService --> Book : <<uses>>

PaginatedLists --> PaginatedList : <<uses>>

BookImportedEvent "1" o-- "1" User : <<has>>
AppContext "1" o-- "1" BookDataService : <<has>>

@enduml